use anyhow::{Context, Result};
use clap::{Arg, Command};
use pulldown_cmark::{Event, Parser};
use std::fs;

mod pdf_renderer;
use pdf_renderer::PdfRenderer;

fn main() -> Result<()> {
    let matches = Command::new("markdown-to-pdf-rust")
        .about("Convert Markdown to PDF with LaTeX-like typography")
        .version("0.1.0")
        .author("Generated by GitHub Copilot")
        .arg(
            Arg::new("input")
                .help("Input Markdown file")
                .required(true)
                .index(1),
        )
        .arg(
            Arg::new("output")
                .short('o')
                .long("output")
                .help("Output PDF file")
                .value_name("FILE")
                .required(true),
        )
        .get_matches();

    let input_path = matches
        .get_one::<String>("input")
        .context("Input file argument is required")?;
    let output_path = matches
        .get_one::<String>("output")
        .context("Output file argument is required")?;

    // Read the Markdown file
    let markdown_content = fs::read_to_string(input_path)
        .with_context(|| format!("Failed to read input file: {}", input_path))?;

    // Parse Markdown
    let parser = Parser::new(&markdown_content);
    let events: Vec<Event> = parser.collect();

    // Generate PDF
    let mut pdf_renderer = PdfRenderer::new()?;
    pdf_renderer.render_events(&events)?;
    pdf_renderer.save_to_file(output_path)?;

    println!("Successfully converted {} to {}", input_path, output_path);
    Ok(())
}
